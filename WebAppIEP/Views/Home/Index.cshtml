@model PagedList.IPagedList<xx0000xWebAppIEP.Models.Auction>
@using xx0000xWebAppIEP.Models
@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.EntityFramework
@using PagedList.Mvc;
@{
    ViewBag.Title = "Home Page";
}

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

<div class="jumbotron myJumbotron" >
    <h1>TokenDash</h1>    
    <p class="lead">Creating more economic opportunity for everyone! </p>    
</div>

<div class="row">
    <div class="col-md-4 text-primary">
        <h2>Bidding on TokenDash is easy</h2>
        <p>
            – and you can do it from any internet-connected device, anywhere!
        </p>
        
    </div>
    <div class="col-md-4">        
    </div>
        <div class="col-md-4 text-success">
            <blockquote class="blockquote-reverse">
                <p>“I strongly believe the business of a business is to improve the world.”</p>
                <small>Marc Benioff</small>
            </blockquote>
        </div>
 </div>

<div class="row">
    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#"> </a>
            </div>
            
        </div>
    </nav>
</div>


<div class="row">

<div class="col-sm-3 col-md-3 col-lg-3">
    <div class="row">
        <div class="panel panel-primary">
            <div class="panel-heading"><h4>Search</h4></div>
            <div class="panel-body">
                @using (Html.BeginForm())
            {    <div class="form-group">
                    @Html.Label("Search by product name: ")
                    @Html.TextBox("SearchString", ViewBag.CurrentSearch as string, new { @class = "form-control" })
                    @Html.Label("Containing: ")
                    <select name="searchType" class="form-control" selected="@ViewBag.CurrentSearchType">
                        <option value="ANY">Any words</option>
                        <option value="ALL">All words</option>
                    </select>
                    @Html.Label("Search by status")
                    <select class="form-control" name="statusList" selected="@ViewBag.CurrentStatus">
                        <option value=""></option>
                        
                        <option value="OPEN">Open</option>
                        <option value="SOLD">Sold</option>
                        <option value="EXPIRED">Expired</option>

                    </select>

                    @Html.Label("Min price ")
                    <input type="number" class="form-control" id="minPrice" name="minPrice" min="0" data-bind="value:minPrice" step="1" value="@ViewBag.CurrentMin" />

                    @Html.Label("Max price ")
                    <input type="number" class="form-control" id="maxPrice" name="maxPrice" min="0" data-bind="value:maxPrice" step="1" value="@ViewBag.CurrentMax" />
                    <br /><br />
                    <input type="submit" value="Search" class="btn btn-primary btn-lg" />
                </div>
                }

            </div>
        </div>
    </div>

</div>


<div class="col-sm-9 col-md-9 col-lg-9">
    <!---->


    @{ var numItems = 0;}
    @foreach (var item in Model)
    {
        if (numItems % 3 == 0)
        {
            @:<div class="row" style="border-bottom:thin; border-top:thin; border-color:gainsboro;">
        }

        <div class="col-sm-4 col-md-4 col-lg-4" style="margin-bottom:20px; font-size:medium;">
            <div class="text-center">
                <h3>@Html.ActionLink(item.ProductName, "Details", "Auctions", new { id = item.Id }, new { }) </h3>
             </div>   
                <br />
                <div class="row text-center" style="padding:10px;">
                <img class="img-thumbnail img-responsive" src="data:image;base64,@System.Convert.ToBase64String(item.Image)" /> <br />
                </div>
                <div id="timer-@item.Id" class="text-success text-center" style="font-size:x-large;"></div>               
            <div class="text-center">
                <div class="text-success" style="font-size:larger;">
                       <div >Price:</div>
                        <div >@Html.DisplayFor(modelItem => item.StartingPrice)</div>
                        <div  > + </div>
                        <div id="priceInc-@item.Id" >@Html.DisplayFor(modelItem => item.PriceInc)</div>
                                    
                 </div>  
                <!--
                    <div  class="text-danger">
                    @switch (item.Status)
                    {
                        case 2: @:OPEN
                            break;

                        case 3: @:SOLD
                            break;

                        case 4: @:EXPIRED.
                            break;

                        default: @:ERROR
                            break;
                    }
                    </div>
                
                    -->
            
                Last Bidder: 
                @if (item.AspNetUser != null)
                {
                    <div id="email-@item.Id">@Html.DisplayFor(modelItem => item.AspNetUser.Email)</div> <br />
                }
                else
                {
                    <div id="email-@item.Id">N/A</div> <br />
                }

               

                @Html.HiddenFor(model => item.RowVersion, new { id = "rowV-" + item.Id })

                @if (item.Status == 2 && User.Identity.IsAuthenticated)
                {
                    <br />
                    <input type="button" value="Bid Now" id="bid-@item.Id" class="btn btn-success" />
                }
            </div>



          </div>


        if (numItems % 3 == 2)
        {   @: </div>   
         }

        numItems++;
    }

    @if (numItems % 3 != 0)
    {        @:</div>    
         }




    <!---->
    </div>

</div>

<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, currentSearch = ViewBag.CurrentSearch, currentSearchType = ViewBag.CurrentSearchType, currentStatus = ViewBag.CurrentStatus, currentMin = ViewBag.CurrentMin, currentMax = ViewBag.CurrentMax }))

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>

        var arrayAucId = new Array();
        var arrayAucTime = new Array();
        var numberAuc = 0;

        function padNum(str) {
            return ('0' + str).slice(-2);
        }
        

        @foreach (Auction item in Model)
        {
            DateTime closing = (DateTime)item.ClosingDT;
            TimeSpan diff = closing.Subtract(DateTime.Now.ToUniversalTime());
            int d = (int)Math.Floor(diff.TotalSeconds);


            @:arrayAucId.push(@item.Id);
            @:arrayAucTime.push(@d);
            @:numberAuc++;
               }

        var intervalID = setInterval(function () {
            for (var i = 0; i < numberAuc; i++) {
                var ss = arrayAucTime[i];

                if (ss < 0)
                {
                    $('#timer-' + arrayAucId[i]).html("CLOSED");
                    $('#timer-' + arrayAucId[i]).removeClass("text-success").addClass("text-danger");
                }
                else
                {
                    var mm = Math.floor(ss / 60);
                    ss = ss % 60;
                    var hh = Math.floor(mm / 60)
                    mm = mm % 60;
                   
                    var timeS = padNum(hh) + ':' + padNum(mm) + ':' + padNum(ss);

                    $('#timer-' + arrayAucId[i]).html(timeS);

                    arrayAucTime[i] = arrayAucTime[i] - 1;
                }

                
            }
        }, 1000);


        $(function () {
            // Reference the auto-generated proxy for the hub.
            var bids = $.connection.myHub;
            // Create a function that the hub can call back to display messages.
            bids.client.bidOutcome = function (username, auction, priceInc, rowVersion, aucExtended) {

                $('#email-' + auction).html(username);
                $('#priceInc-' + auction).html(priceInc);
                $('#rowV-' + auction).val(rowVersion);
               
                if (aucExtended==="true") {
                    //azuriranje!
                  
                    for (var i = 0; i < numberAuc; i++) {
                        if (arrayAucId[i] == auction) {
                            arrayAucTime[i] = 10;                           
                        }
                    }
                   
                }


            };

            bids.client.bidFailed = function () {
                alert("Unfortunately your attempt to bid failed!");
            };

            bids.client.auctionOver = function () {
                alert("Unfortunately this auction is closed!");
            };

            bids.client.insufFunds = function () {
                alert("Unfortunately you have insufficient funds!");
            };




            // Start the connection.
            $.connection.hub.start().done(function () {
                $('[id^=bid-]').click(function () {


                    
                    var buttonId = $(this).attr('id');
                    var aucID = buttonId.replace('bid-', '');
                    var rowVersion = $('#rowV-' + aucID).val();
                    bids.server.bidPlaced(aucID, rowVersion);
                });
            });
        });

    </script>
}
